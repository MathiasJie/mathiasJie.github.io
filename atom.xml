<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mathias&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-21T09:32:47.754Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mathias</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot整合JWT</title>
    <link href="http://yoursite.com/2018/06/21/SpringBoot%E6%95%B4%E5%90%88jwt/"/>
    <id>http://yoursite.com/2018/06/21/SpringBoot整合jwt/</id>
    <published>2018-06-21T08:03:43.914Z</published>
    <updated>2018-06-21T09:32:47.754Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/be1718827eb95d638ff5.jpg" alt=""></p><a id="more"></a><p>关于<strong>JWT(Json Web Token)</strong>的含义就不多做介绍了，主要记录下jwt载SpringBoot中的用法。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0.3</strong></li></ul><h2 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h2><p>1.首先在<strong>用户登录的时候生成token</strong>,返回给客户端。<br>2.客户端<strong>每次请求带上token</strong>,服务端在接收请求的时候<strong>取出token进行验证并且从token中获取当前用户信息</strong>。<br>3.根据用户信息（用户相应的权限）来作出判断是否允许该请求通过。</p><h2 id="redis作用"><a href="#redis作用" class="headerlink" title="redis作用"></a>redis作用</h2><p>由于JWT生成的token在设置过期时间后我们是无法手动控制的，所以在进行登出操作后还携带token的话也是可以访问请他请求的，所以为避免这种情况，我们可以：<br>1.<strong>在登陆的时候存到redis缓存里面，把username作key，并设置缓存过期时间。</strong><br>2.通过token获取用户信息，<strong>用username去查询redis中的token是否过期</strong>，过期则提示用户重新登陆。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!-- https://mvnrepository.com/artifact/com.auth0/java-jwt --&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.4.0&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">           &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;18.0&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里给出了本次项目用到所有依赖。</p><h2 id="配置文件application-yml"><a href="#配置文件application-yml" class="headerlink" title="配置文件application.yml"></a>配置文件application.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    url: jdbc:mysql://127.0.0.1:3306/XXX?characterEncoding=utf8</span><br><span class="line">    username: XXX</span><br><span class="line">    password: XXX</span><br><span class="line">server:</span><br><span class="line">  port: 80</span><br></pre></td></tr></table></figure><h2 id="实体类UserBean"><a href="#实体类UserBean" class="headerlink" title="实体类UserBean"></a>实体类UserBean</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：mathias</span></span><br><span class="line"><span class="comment"> * Description:</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="meta">@Transient</span></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里 <strong>@Transient</strong>表示不作数据关系映射</p><h2 id="Dao层UserJpa"><a href="#Dao层UserJpa" class="headerlink" title="Dao层UserJpa"></a>Dao层UserJpa</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserJpa</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserBean</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名查询用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserBean <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Service层"><a href="#Service层" class="headerlink" title="Service层"></a>Service层</h2><p><strong>UserService</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserBean <span class="title">auth</span><span class="params">(UserBean user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据token获取用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">UserBean <span class="title">getUserByToken</span><span class="params">(String token)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(String token)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>UserServiceImpl</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserJpa userJpa;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserBean <span class="title">auth</span><span class="params">(UserBean user)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(user.getUsername()))&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"用户名不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"密码不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserBean userBean = userJpa.findByUsername(user.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (userBean == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"没有找到用户名为【"</span>+user.getUsername()+<span class="string">"】的用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (! user.getPassword().equals(userBean.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"用户名或者密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        登录生成token</span></span><br><span class="line">        onLogin(userBean);</span><br><span class="line">        <span class="keyword">return</span> userBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserBean <span class="title">getUserByToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            map = JwtUtil.verifyToken(token);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"用户未登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String username = map.get(<span class="string">"username"</span>);</span><br><span class="line">        Long expire = redisTemplate.getExpire(username);</span><br><span class="line"><span class="comment">//        存入缓存的token已经过期</span></span><br><span class="line">        <span class="keyword">if</span> (expire &lt; <span class="number">0L</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"用户未登录"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        刷新token</span></span><br><span class="line">        refreshToken(token,username);</span><br><span class="line">        UserBean userBean = userJpa.findByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (userBean == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span>  <span class="keyword">new</span> UserException(<span class="number">400</span>,<span class="string">"没有找到用户名为【"</span>+username+<span class="string">"】的用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        userBean.setToken(token);</span><br><span class="line">        <span class="keyword">return</span> userBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = JwtUtil.verifyToken(token);</span><br><span class="line"><span class="comment">//        删除当前用户在redis中缓存的token</span></span><br><span class="line">        redisTemplate.delete(map.get(<span class="string">"username"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录并且生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userBean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onLogin</span><span class="params">(UserBean userBean)</span> </span>&#123;</span><br><span class="line">       String token = JwtUtil.createToken(ImmutableMap.of(<span class="string">"username"</span>, userBean.getUsername(),</span><br><span class="line">                <span class="string">"id"</span>, userBean.getId().toString()));</span><br><span class="line"><span class="comment">//        刷新token有效时间</span></span><br><span class="line">        refreshToken(token,userBean.getUsername());</span><br><span class="line">        userBean.setToken(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshToken</span><span class="params">(String token, String username)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        存入redis</span></span><br><span class="line">        redisTemplate.opsForValue().set(username,token);</span><br><span class="line"><span class="comment">//        设置过期时间</span></span><br><span class="line">        redisTemplate.expire(username,<span class="number">30</span>,TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里做了<a href="https://mathiasjie.github.io/2018/06/19/SpringBoot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/" title="全局异常处理" target="_blank" rel="noopener"><strong>全局异常处理</strong></a>，所以直接抛出异常即可（不知道怎么设置全局异常处理？可以观看我之前写的<a href="https://mathiasjie.github.io/2018/06/19/SpringBoot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/" title="全局异常处理" target="_blank" rel="noopener"><strong>SpringBoot全局异常处理</strong></a>)<br><strong>注意</strong>：在登陆生成token的时候，<strong>不能放入敏感信息</strong>，如用户密码等，因为这个是可以通过base64破解的，jwt主要验证的是签名，只有签名部分是不可破解的。</p><h2 id="工具类JwtUtil"><a href="#工具类JwtUtil" class="headerlink" title="工具类JwtUtil"></a>工具类JwtUtil</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> String SECRET = <span class="string">"session_secret"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> String ISSUER = <span class="string">"mathias"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> claims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">(Map&lt;String,String&gt; claims)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line"></span><br><span class="line">        JWTCreator.Builder builder = JWT.create().withIssuer(ISSUER)</span><br><span class="line">                                        .withExpiresAt(DateUtils.addDays(<span class="keyword">new</span> Date(), <span class="number">1</span>));</span><br><span class="line">        claims.forEach(builder::withClaim) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.sign(algorithm);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,String&gt; <span class="title">verifyToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(SECRET);</span><br><span class="line">        JWTVerifier verifier = JWT.require(algorithm).withIssuer(ISSUER).build();</span><br><span class="line">        DecodedJWT jwt = verifier.verify(token);</span><br><span class="line">        Map&lt;String, Claim&gt; claims = jwt.getClaims();</span><br><span class="line">        Map&lt;String,String&gt; map = Maps.newHashMap();</span><br><span class="line">        claims.forEach((k,v) -&gt; map.put(k,v.asString()));</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>方便验证，使用了postman<br>1.输入<strong><a href="http://localhost/jwt/getUserByToken" target="_blank" rel="noopener">http://localhost/jwt/getUserByToken</a></strong>，在未登录的时候访问根据token获取用户信息的接口：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">"msg"</span>: <span class="string">"用户未登录"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.进行登录操作，生成token,访问<strong><a href="http://localhost/jwt/auth" target="_blank" rel="noopener">http://localhost/jwt/auth</a></strong>，<strong>参数传入用户名和密码</strong>：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"mathias"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"XXXX"</span>,</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJtYXRoaWFzIiwiaWQiOiI4IiwiZXhwIjoxNTI5NjU4Mjk3LCJ1c2VybmFtZSI6Im1hdGhpYXMifQ.UNJ9pyTT7QKl1a2cXdFT4igioJ2UhhLxwFsxXdlXSAg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.再次执行第一步，加上参数token,值就是第二步返回的token值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"id"</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"mathias"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"XXXX"</span>,</span><br><span class="line">    <span class="string">"token"</span>: <span class="string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJtYXRoaWFzIiwiaWQiOiI4IiwiZXhwIjoxNTI5NjU4Mjk3LCJ1c2VybmFtZSI6Im1hdGhpYXMifQ.UNJ9pyTT7QKl1a2cXdFT4igioJ2UhhLxwFsxXdlXSAg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>返回了用户信息，说明成功<br>4.测试下登出操作，输入<strong><a href="http://localhost/jwt/logout" target="_blank" rel="noopener">http://localhost/jwt/logout</a></strong>，<strong>参数也是token</strong>,登出，在执行第三步会发现信息已经是未登录状态了。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>这个只是一个简单的demo,在实际开发过程中我们的<strong>token一般会放在请求头Header</strong>里面或者是<strong>cookie</strong>中，毕竟我们不可能每请求一次就设置一下token参数。<br>以上纯属个人拙见，如果有纰漏、不足之处还请各位大佬指正，不胜感激…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/be1718827eb95d638ff5.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JWT" scheme="http://yoursite.com/categories/JWT/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="JWT" scheme="http://yoursite.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>常用工具方法合集（一）--Map与实体之间的相互转换</title>
    <link href="http://yoursite.com/2018/06/19/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E5%90%88%E9%9B%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2018/06/19/常用工具合集（一）/</id>
    <published>2018-06-19T10:19:00.906Z</published>
    <updated>2018-06-20T03:36:19.232Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/dca017b86e8df58cea2e.jpg" alt=""><br><a id="more"></a></p><p>收集一些常用的工具方法，方便查阅。</p><h2 id="Map转实体"><a href="#Map转实体" class="headerlink" title="Map转实体"></a>Map转实体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Map转成实体对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> map map实体对象包含属性</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> clazz 实体对象类型</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> obj</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">map2Object</span><span class="params">(Map&lt;String, Object&gt; map, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Object obj = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           obj = clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           Field[] fields = obj.getClass().getDeclaredFields();</span><br><span class="line">           <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">               <span class="keyword">int</span> mod = field.getModifiers();</span><br><span class="line">               <span class="keyword">if</span> (Modifier.isStatic(mod) || Modifier.isFinal(mod)) &#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">               field.set(obj, map.get(field.getName()));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> obj;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="实体转Map"><a href="#实体转Map" class="headerlink" title="实体转Map"></a>实体转Map</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体对象转成Map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 实体对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">object2Map</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        Class clazz = obj.getClass();</span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                map.put(field.getName(), field.get(obj));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>亲测有效，溜了溜了，未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/dca017b86e8df58cea2e.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="常用工具方法" scheme="http://yoursite.com/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="常用工具方法" scheme="http://yoursite.com/tags/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0全局异常处理</title>
    <link href="http://yoursite.com/2018/06/19/SpringBoot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/19/SpringBoot全局异常处理/</id>
    <published>2018-06-19T02:48:38.980Z</published>
    <updated>2018-06-20T03:50:35.039Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/ea44603cafdefc75acaa.jpg" alt=""><br><a id="more"></a><br>在实际项目开发中，我们会遇到各种各样的异常，如果我们对这些异常不做处理直接暴露给用户的话，肯定是一种不好的体验，所以我们想办法捕获异常。最常见的方法是用try-catch 来捕获异常并设置返回信息，但是我们如果每个异常都去try-catch的话，无异是一件很费力的事情，所以我们有必要寻找一个可以处理全局异常的方法…</p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0.3</strong></li></ul><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dependencies&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建异常返回信息模板ErrorResponseEntity"><a href="#创建异常返回信息模板ErrorResponseEntity" class="headerlink" title="创建异常返回信息模板ErrorResponseEntity"></a>创建异常返回信息模板ErrorResponseEntity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：mathias</span></span><br><span class="line"><span class="comment"> * Description: 异常信息模板</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponseEntity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ErrorResponseEntity</span><span class="params">(<span class="keyword">int</span> code, String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  --省略setter、getter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建自定义异常TestException"><a href="#创建自定义异常TestException" class="headerlink" title="创建自定义异常TestException"></a>创建自定义异常TestException</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：mathias</span></span><br><span class="line"><span class="comment"> * Description:自定义异常</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestException</span>  <span class="keyword">extends</span>  <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code ;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestException</span><span class="params">(<span class="keyword">int</span> code, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">        <span class="keyword">this</span>.setCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     --省略setter、getter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建全局处理异常GlobalExceptionHandler"><a href="#创建全局处理异常GlobalExceptionHandler" class="headerlink" title="创建全局处理异常GlobalExceptionHandler"></a>创建全局处理异常GlobalExceptionHandler</h2><pre><code>注解说明-@ControllerAdvice捕获Controller层抛出的异常，如果添加@ResponseBody返回信息则为JSON格式。-@RestControllerAdvice相当于 @ControllerAdvice 与 @ResponseBody的结合体。-@ExceptionHandler统一处理一种类的异常，减少代码重复率，降低复杂度。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：mathias</span></span><br><span class="line"><span class="comment"> * Description: 全局异常处理 </span></span><br><span class="line"><span class="comment"> * Date: 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> <span class="keyword">extends</span> <span class="title">ResponseEntityExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义要捕获的异常，多个异常用 <span class="doctag">@ExceptionHandler</span>(&#123;&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(TestException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorResponseEntity <span class="title">testExceptionHandler</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    <span class="keyword">final</span> Exception e ,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        RuntimeException exception = (RuntimeException) e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponseEntity(<span class="number">400</span>,exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义要捕获的异常，多个异常用 <span class="doctag">@ExceptionHandler</span>(&#123;&#125;)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(RuntimeException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ErrorResponseEntity <span class="title">runtimeException</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                <span class="keyword">final</span> Exception e , </span></span></span><br><span class="line"><span class="function"><span class="params">                                                HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        RuntimeException exception = (RuntimeException) e;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ErrorResponseEntity(<span class="number">400</span>,exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用接口映射处理异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;Object&gt; <span class="title">handleExceptionInternal</span><span class="params">(Exception ex,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                             Object body,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                             HttpHeaders headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                             HttpStatus status,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                             WebRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line">            MethodArgumentNotValidException exception = (MethodArgumentNotValidException) ex;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorResponseEntity(status.value(),</span><br><span class="line">                    exception.getBindingResult().getAllErrors().get(<span class="number">0</span>).getDefaultMessage()), status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MethodArgumentTypeMismatchException) &#123;</span><br><span class="line">            MethodArgumentTypeMismatchException exception = (MethodArgumentTypeMismatchException) ex;</span><br><span class="line">            logger.error(<span class="string">"参数转换失败，方法："</span> + exception.getParameter().getMethod().getName() </span><br><span class="line">                    + <span class="string">"，参数："</span> + exception.getName()</span><br><span class="line">                    + <span class="string">",信息："</span> + exception.getLocalizedMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorResponseEntity(status.value(), <span class="string">"参数转换失败"</span>), status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> ErrorResponseEntity(status.value(), <span class="string">"参数转换失败"</span>), status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>创建TestController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ：mathias</span></span><br><span class="line"><span class="comment"> * Description:测试全局异常</span></span><br><span class="line"><span class="comment"> * Date: 2018/6/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testException"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">(Integer num )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> TestException(<span class="number">400</span>,<span class="string">"num 不能为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / num;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"result: "</span>+ i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里当num = null的时候就抛出我们的自定义异常，然后全局异常捕获，返回我们异常模板的信息。启动项目，访问<strong><a href="http://localhost:8080/testException" target="_blank" rel="noopener">http://localhost:8080/testException</a></strong>，返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">code: <span class="number">400</span>,</span><br><span class="line">msg: <span class="string">"num 不能为空"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再访问 <strong><a href="http://localhost:8080/testException?num=0" target="_blank" rel="noopener">http://localhost:8080/testException?num=0</a></strong>，返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">code: <span class="number">400</span>,</span><br><span class="line">msg: <span class="string">"/ by zero"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问 <strong><a href="http://localhost:8080/testException?num=2" target="_blank" rel="noopener">http://localhost:8080/testException?num=2</a></strong>，返回结果<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result: <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p>好了，这样就完成了我们的全局异常处理。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>文章参考自 <strong><a href="http://blog.battcn.com/2018/06/01/springboot/v2-other-exception/" target="_blank" rel="noopener">http://blog.battcn.com/2018/06/01/springboot/v2-other-exception/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/ea44603cafdefc75acaa.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="exception" scheme="http://yoursite.com/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0使用redis作数据缓存</title>
    <link href="http://yoursite.com/2018/06/17/SpringBoot2.0%E6%95%B4%E5%90%88redis%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/06/17/SpringBoot2.0整合redis缓存数据/</id>
    <published>2018-06-17T05:31:52.969Z</published>
    <updated>2018-06-20T03:56:22.939Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/65fb7b01ad3b3e92d3e9.jpg" alt=""><br><a id="more"></a></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0.3</strong></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先，先创建一个SpringBoot项目，在pom.xml里面添加以下依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--添加redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--添加sprng-data-jpa依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--添加mysql依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>为了区分我们是从redis中获取的数据，这里引入mysql来从数据库中查询，接下来在application配置文件中加入数据库连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=XXX</span><br><span class="line">spring.datasource.password=XXX</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/XXX?characterEncoding=utf8</span><br><span class="line">spring.jpa.show-sql=true</span><br></pre></td></tr></table></figure></p><p>这里redis如果没有配置的话就是默认的，地址为127.0.0.1，端口号为6379，密码为空。接着创建实体类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    --省略setter、getter方法</span><br></pre></td></tr></table></figure></p><p>dao层<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserJpa</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">UserBean</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里继承SpringDataJpa的JpaRepository，可以实现基础的增删改查操作，具体更多以用法后面会写一些，以上基本配置完成之后，重要部分来了，创建service<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试取出缓存数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getRedisData</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>serviceImpl<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger =LoggerFactory.getLogger(RedisServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserJpa userJpa;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRedisData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line">        String redisData = ops.get(<span class="string">"redisData"</span>);</span><br><span class="line"><span class="comment">//        缓存中没有数据</span></span><br><span class="line">        <span class="keyword">if</span> (redisData == <span class="keyword">null</span>)&#123;</span><br><span class="line">            logger.info(<span class="string">"查询数据库，存入缓存数据"</span>);</span><br><span class="line"><span class="comment">//           查询数据库</span></span><br><span class="line">            List&lt;UserBean&gt; userList = userJpa.findAll();</span><br><span class="line"><span class="comment">//            存入缓存</span></span><br><span class="line">            ops.set(<span class="string">"redisData"</span>,userList.toString(),<span class="number">1800</span>,TimeUnit.SECONDS);</span><br><span class="line">            <span class="keyword">return</span> userList.toString();</span><br><span class="line">        &#125;</span><br><span class="line">            logger.info(<span class="string">"直接从缓存中获取数据"</span>);</span><br><span class="line">            <span class="keyword">return</span> redisData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一般时先从redis里面去数据，如果没有取到数据的话,就去查数据库，当然，查到数据之后也应该放进redis中，方便下次取出。这里ops.set()方法表示存入key为redisData的userList数据，设置有效时间为1800，TimeUnit.seconds表示单位为秒。<br>最后，创建测试类测试一下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String redisData = redisService.getRedisData();</span><br><span class="line">        System.out.println(redisData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动测试类观察控制台的打印日志：<br><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/c613cd7ccf5bc53a77d2.png" alt=""><br>第一次启动，因为redis里面没有数据，所以查询数据库，然后放到redis里面，再次启动测试类<br><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/1ebd09526ae01cf0f907.png" alt=""><br>这里看到日志里已经没有取查我们的数据库了，而是直接从redis里面拿的数据了，大功告成 ^-^</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/65fb7b01ad3b3e92d3e9.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0整合quartz发布定时任务</title>
    <link href="http://yoursite.com/2018/06/15/SpringBoot%202.0%E6%95%B4%E5%90%88quartz%E5%8F%91%E5%B8%83%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/06/15/SpringBoot 2.0整合quartz发布定时任务/</id>
    <published>2018-06-15T07:25:26.923Z</published>
    <updated>2018-06-20T03:50:08.329Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/2f2c4529aebefbbd447b.jpg" alt=""><br><a id="more"></a></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0</strong></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先，先创建一个SpringBoot项目，在pom.xml里面添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定时任务依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后，包名下面创建config目录，创建QuartzConfig.java类作为定时任务的配置文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">testDataJobDetail</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(TestQuartzJob.class)</span><br><span class="line">                .withIdentity(<span class="string">"testDataJobDetail"</span>)</span><br><span class="line">                .storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">testDataTrigger</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        设置定时同步缓存数据</span></span><br><span class="line">        ScheduleBuilder schedBuilder =SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInSeconds(<span class="number">1800</span>).repeatForever();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(testDataJobDetail())</span><br><span class="line">                .withIdentity(<span class="string">"testDataTrigger"</span>)</span><br><span class="line">                .withSchedule(schedBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中TestQuartzJob是定时任务类,withIntervalInSeconds是设置时间进行同步，以秒为单位，这里设置了1800秒，也就是30分钟。<br>接下来，开始创建定时任务类TestQuartzJob，便于区分，我们新建包名job用来专门存放定时任务类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestQuartzJob</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger =LoggerFactory.getLogger(TestQuartzJob.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext jobExecutionContext)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">            logger.info(<span class="string">"开始定时任务"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便测试，我们把之前设定的1800秒换成5秒，启动之后观察控制台的日志</p><p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/4206880c6c82aa84ef54.png" alt=""></p><p>注意日志时间，的确是5秒一次，这样我们的定时任务也就完成了。</p><p>（PS:第一次自己写博客，写的不好请多指正，留下你的评论，一起探讨吧&gt;_&lt;）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/2f2c4529aebefbbd447b.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="quartz" scheme="http://yoursite.com/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>初识NoSQL</title>
    <link href="http://yoursite.com/2018/06/14/nosql/"/>
    <id>http://yoursite.com/2018/06/14/nosql/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2018-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/65fc96f5077c1d5b1f4e.jpg" alt=""><br><a id="more"></a></p><h2 id="NoSql-简介"><a href="#NoSql-简介" class="headerlink" title="NoSql 简介"></a>NoSql 简介</h2><p>NOSQL(<strong>NOSQL = NOT ONLY SQL</strong>)，意即”不仅仅是SQL”。在现代的计算系统上每天网络上都会产生庞大的数据量。通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。<br>NOSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NOSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p><h2 id="关系型数据库遵循ACID规则"><a href="#关系型数据库遵循ACID规则" class="headerlink" title="关系型数据库遵循ACID规则"></a>关系型数据库遵循ACID规则</h2><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：<br>1.　 <strong>A (Atomicity) 原子性</strong><br>　　原子性很容易理解，也就是说<strong>事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚</strong>。<br>　　比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。<br>2.　 <strong>C (Consistency) 一致性</strong><br>　　一致性也比较容易理解，也就是说<strong>数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</strong><br>　　例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。<br>3.　 <strong>I (Isolation) 独立性</strong><br>　　所谓的独立性是指<strong>并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</strong><br>　　比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。<br>4.　 <strong>D (Durability) 持久性</strong><br>　　持久性是指<strong>一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</strong></p><h2 id="关系型数据库（RDBMS）与NoSQL对比"><a href="#关系型数据库（RDBMS）与NoSQL对比" class="headerlink" title="关系型数据库（RDBMS）与NoSQL对比"></a>关系型数据库（RDBMS）与NoSQL对比</h2><p><strong>RDBMS</strong> </p><ul><li>高度组织化结构化数据 </li><li>结构化查询语言（SQL） (SQL) </li><li>数据和关系都存储在单独的表中。 </li><li>数据操纵语言，数据定义语言 </li><li>严格的一致性</li><li>基础事务</li></ul><p><strong>NoSQL</strong></p><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li><strong>键 - 值对存储，列存储，文档存储，图形数据库</strong></li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理 </li><li><strong>高性能，高可用性和可伸缩性</strong></li></ul><h2 id="NoSQL优点和缺点"><a href="#NoSQL优点和缺点" class="headerlink" title="NoSQL优点和缺点"></a>NoSQL优点和缺点</h2><p><strong>优点：</strong></p><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul><p><strong>缺点:</strong></p><ul><li>没有标准化</li><li>有限的查询功能（到目前为止）</li><li>最终一致是不直观的程序</li></ul><p>文章摘自<a href="http://www.runoob.com/mongodb/nosql.html" title="菜鸟教程" target="_blank" rel="noopener">菜鸟教程</a>，仅供学习，勿用作其他用途。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/65fc96f5077c1d5b1f4e.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="http://yoursite.com/categories/NoSQL/"/>
    
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
</feed>
