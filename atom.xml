<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mathias&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-15T08:25:26.433Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mathias</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot 2.0 +定时任务</title>
    <link href="http://yoursite.com/2018/06/15/SpringBoot%202.0%E6%95%B4%E5%90%88quartz%E5%8F%91%E5%B8%83%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/06/15/SpringBoot 2.0整合quartz发布定时任务/</id>
    <published>2018-06-15T07:25:26.923Z</published>
    <updated>2018-06-15T08:25:26.433Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/2f2c4529aebefbbd447b.jpg" alt=""><br><a id="more"></a></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0</strong></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先，先创建一个SpringBoot项目，在pom.xml里面添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定时任务依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>然后，包名下面创建config目录，创建QuartzConfig.java类作为定时任务的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class QuartzConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public JobDetail testDataJobDetail()&#123;</span><br><span class="line">        return JobBuilder.newJob(TestQuartzJob.class)</span><br><span class="line">                .withIdentity(&quot;testDataJobDetail&quot;)</span><br><span class="line">                .storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Trigger testDataTrigger()&#123;</span><br><span class="line">//        设置定时同步缓存数据</span><br><span class="line">        ScheduleBuilder schedBuilder =SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInSeconds(1800).repeatForever();</span><br><span class="line"></span><br><span class="line">        return TriggerBuilder.newTrigger().forJob(testDataJobDetail())</span><br><span class="line">                .withIdentity(&quot;testDataTrigger&quot;)</span><br><span class="line">                .withSchedule(schedBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中TestQuartzJob是定时任务类,withIntervalInSeconds是设置时间进行同步，以秒为单位，这里设置了1800秒，也就是30分钟。<br>接下来，开始创建定时任务类TestQuartzJob，便于区分，我们新建包名job用来专门存放定时任务类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TestQuartzJob extends QuartzJobBean &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger =LoggerFactory.getLogger(TestQuartzJob.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext jobExecutionContext)</span><br><span class="line">            throws JobExecutionException &#123;</span><br><span class="line">            logger.info(&quot;开始定时任务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便测试，我们把之前设定的1800秒换成5秒，启动之后观察控制台的日志</p><p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/4206880c6c82aa84ef54.png" alt=""></p><p>注意日志时间，的确是5秒一次，这样我们的定时任务也就完成了。</p><p>（PS:第一次自己写博客，写的不好请多指正，留下你的评论，一起探讨吧&gt;_&lt;）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/2f2c4529aebefbbd447b.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>初识NoSQL</title>
    <link href="http://yoursite.com/2018/06/14/nosql/"/>
    <id>http://yoursite.com/2018/06/14/nosql/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2018-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/65fc96f5077c1d5b1f4e.jpg" alt=""><br><a id="more"></a></p><h2 id="NoSql-简介"><a href="#NoSql-简介" class="headerlink" title="NoSql 简介"></a>NoSql 简介</h2><p>NOSQL(<strong>NOSQL = NOT ONLY SQL</strong>)，意即”不仅仅是SQL”。在现代的计算系统上每天网络上都会产生庞大的数据量。通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。<br>NOSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NOSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p><h2 id="关系型数据库遵循ACID规则"><a href="#关系型数据库遵循ACID规则" class="headerlink" title="关系型数据库遵循ACID规则"></a>关系型数据库遵循ACID规则</h2><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：<br>1.　 <strong>A (Atomicity) 原子性</strong><br>　　原子性很容易理解，也就是说<strong>事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚</strong>。<br>　　比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。<br>2.　 <strong>C (Consistency) 一致性</strong><br>　　一致性也比较容易理解，也就是说<strong>数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</strong><br>　　例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。<br>3.　 <strong>I (Isolation) 独立性</strong><br>　　所谓的独立性是指<strong>并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</strong><br>　　比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。<br>4.　 <strong>D (Durability) 持久性</strong><br>　　持久性是指<strong>一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</strong></p><h2 id="关系型数据库（RDBMS）与NoSQL对比"><a href="#关系型数据库（RDBMS）与NoSQL对比" class="headerlink" title="关系型数据库（RDBMS）与NoSQL对比"></a>关系型数据库（RDBMS）与NoSQL对比</h2><p><strong>RDBMS</strong> </p><ul><li>高度组织化结构化数据 </li><li>结构化查询语言（SQL） (SQL) </li><li>数据和关系都存储在单独的表中。 </li><li>数据操纵语言，数据定义语言 </li><li>严格的一致性</li><li>基础事务</li></ul><p><strong>NoSQL</strong></p><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li><strong>键 - 值对存储，列存储，文档存储，图形数据库</strong></li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理 </li><li><strong>高性能，高可用性和可伸缩性</strong></li></ul><h2 id="NoSQL优点和缺点"><a href="#NoSQL优点和缺点" class="headerlink" title="NoSQL优点和缺点"></a>NoSQL优点和缺点</h2><p><strong>优点：</strong></p><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul><p><strong>缺点:</strong></p><ul><li>没有标准化</li><li>有限的查询功能（到目前为止）</li><li>最终一致是不直观的程序</li></ul><p>文章摘自<a href="http://www.runoob.com/mongodb/nosql.html" title="菜鸟教程" target="_blank" rel="noopener">菜鸟教程</a>，仅供学习，勿用作其他用途。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/65fc96f5077c1d5b1f4e.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="http://yoursite.com/categories/NoSQL/"/>
    
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
</feed>
