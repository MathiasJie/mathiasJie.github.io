<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mathias&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-19T03:35:02.614Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>mathias</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot2.0全局异常处理</title>
    <link href="http://yoursite.com/2018/06/19/SpringBoot%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2018/06/19/SpringBoot全局异常处理/</id>
    <published>2018-06-19T02:48:38.980Z</published>
    <updated>2018-06-19T03:35:02.614Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/ea44603cafdefc75acaa.jpg" alt=""><br><a id="more"></a><br>在实际项目开发中，我们会遇到各种各样的异常，如果我们对这些异常不做处理直接暴露给用户的话，肯定是一种不好的体验，所以我们想办法捕获异常。最常见的方法是用try-catch 赖不活并设置返回信息，但是我们如果每个异常都去try-catch的话，无异是一件很费力的事情，所以我们有必要寻找一个可以处理全局异常的方法…</p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0.3</strong></li></ul><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h2 id="创建异常返回信息模板ErrorResponseEntity"><a href="#创建异常返回信息模板ErrorResponseEntity" class="headerlink" title="创建异常返回信息模板ErrorResponseEntity"></a>创建异常返回信息模板ErrorResponseEntity</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author ：mathias</span><br><span class="line"> * Description: 异常信息模板</span><br><span class="line"> * Date: 2018/6/19</span><br><span class="line"> */</span><br><span class="line">public class ErrorResponseEntity &#123;</span><br><span class="line">    private int code;</span><br><span class="line">    private String msg;</span><br><span class="line"></span><br><span class="line">    public ErrorResponseEntity(int code, String msg) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">        this.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  --省略setter、getter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建自定义异常TestException"><a href="#创建自定义异常TestException" class="headerlink" title="创建自定义异常TestException"></a>创建自定义异常TestException</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author ：mathias</span><br><span class="line"> * Description:自定义异常</span><br><span class="line"> * Date: 2018/6/19</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class TestException  extends  RuntimeException&#123;</span><br><span class="line"></span><br><span class="line">    private int code ;</span><br><span class="line"></span><br><span class="line">    public TestException(int code, String message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line">        this.setCode(code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     --省略setter、getter方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建全局处理异常GlobalExceptionHandler"><a href="#创建全局处理异常GlobalExceptionHandler" class="headerlink" title="创建全局处理异常GlobalExceptionHandler"></a>创建全局处理异常GlobalExceptionHandler</h2><pre><code>注解解释-@ControllerAdvice捕获Controller层抛出的异常，如果添加@ResponseBody返回信息则为JSON格式。-@RestControllerAdvice相当于 @ControllerAdvice 与 @ResponseBody的结合体。-@ExceptionHandler统一处理一种类的异常，减少代码重复率，降低复杂度。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author ：mathias</span><br><span class="line"> * Description: 全局异常处理 </span><br><span class="line"> * Date: 2018/6/19</span><br><span class="line"> */</span><br><span class="line">@RestControllerAdvice</span><br><span class="line">public class GlobalExceptionHandler extends ResponseEntityExceptionHandler &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 定义要捕获的异常，多个异常用 @ExceptionHandler(&#123;&#125;)</span><br><span class="line">     * @param request</span><br><span class="line">     * @param e</span><br><span class="line">     * @param response</span><br><span class="line">     * @return 响应结果</span><br><span class="line">     */</span><br><span class="line">    @ExceptionHandler(TestException.class)</span><br><span class="line">    public ErrorResponseEntity testExceptionHandler(HttpServletRequest request,</span><br><span class="line">                                                    final Exception e ,</span><br><span class="line">                                                    HttpServletResponse response)&#123;</span><br><span class="line">        response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        RuntimeException exception = (RuntimeException) e;</span><br><span class="line">        return new ErrorResponseEntity(400,exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 定义要捕获的异常，多个异常用 @ExceptionHandler(&#123;&#125;)</span><br><span class="line">     * @param request</span><br><span class="line">     * @param e</span><br><span class="line">     * @param response</span><br><span class="line">     * @return 响应结果</span><br><span class="line">     */</span><br><span class="line">    @ExceptionHandler(RuntimeException.class)</span><br><span class="line">    public ErrorResponseEntity runtimeException(HttpServletRequest request,</span><br><span class="line">                                                final Exception e , </span><br><span class="line">                                                HttpServletResponse response)&#123;</span><br><span class="line">        response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">        RuntimeException exception = (RuntimeException) e;</span><br><span class="line">        return new ErrorResponseEntity(400,exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 通用接口映射处理异常</span><br><span class="line">     * @param ex</span><br><span class="line">     * @param body</span><br><span class="line">     * @param headers</span><br><span class="line">     * @param status</span><br><span class="line">     * @param request</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    protected ResponseEntity&lt;Object&gt; handleExceptionInternal(Exception ex,</span><br><span class="line">                                                             Object body,</span><br><span class="line">                                                             HttpHeaders headers,</span><br><span class="line">                                                             HttpStatus status,</span><br><span class="line">                                                             WebRequest request) &#123;</span><br><span class="line">        if (ex instanceof MethodArgumentNotValidException) &#123;</span><br><span class="line">            MethodArgumentNotValidException exception = (MethodArgumentNotValidException) ex;</span><br><span class="line">            return new ResponseEntity&lt;&gt;(new ErrorResponseEntity(status.value(),</span><br><span class="line">                    exception.getBindingResult().getAllErrors().get(0).getDefaultMessage()), status);</span><br><span class="line">        &#125;</span><br><span class="line">        if (ex instanceof MethodArgumentTypeMismatchException) &#123;</span><br><span class="line">            MethodArgumentTypeMismatchException exception = (MethodArgumentTypeMismatchException) ex;</span><br><span class="line">            logger.error(&quot;参数转换失败，方法：&quot; + exception.getParameter().getMethod().getName() </span><br><span class="line">                    + &quot;，参数：&quot; + exception.getName()</span><br><span class="line">                    + &quot;,信息：&quot; + exception.getLocalizedMessage());</span><br><span class="line">            return new ResponseEntity&lt;&gt;(new ErrorResponseEntity(status.value(), &quot;参数转换失败&quot;), status);</span><br><span class="line">        &#125;</span><br><span class="line">        return new ResponseEntity&lt;&gt;(new ErrorResponseEntity(status.value(), &quot;参数转换失败&quot;), status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>创建TestController<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author ：mathias</span><br><span class="line"> * Description:测试全局异常</span><br><span class="line"> * Date: 2018/6/19</span><br><span class="line"> */</span><br><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line">    @RequestMapping(&quot;/testException&quot;)</span><br><span class="line">    public String testException(Integer num )&#123;</span><br><span class="line">        if (num == null)&#123;</span><br><span class="line">            throw new TestException(400,&quot;num 不能为空&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        int i = 10 / num;</span><br><span class="line">        return &quot;result: &quot;+ i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里当num = null的时候就抛出我们的自定义异常，然后全局异常捕获，返回我们异常模板的信息。启动项目，访问<strong><a href="http://localhost:8080/testException" target="_blank" rel="noopener">http://localhost:8080/testException</a></strong>，返回结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">code: 400,</span><br><span class="line">msg: &quot;num 不能为空&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再访问 <strong><a href="http://localhost:8080/testException?num=0" target="_blank" rel="noopener">http://localhost:8080/testException?num=0</a></strong>，返回结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">code: 400,</span><br><span class="line">msg: &quot;/ by zero&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问 <strong><a href="http://localhost:8080/testException?num=2" target="_blank" rel="noopener">http://localhost:8080/testException?num=2</a></strong>，返回结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result: 5</span><br></pre></td></tr></table></figure></p><p>好了，这样就完成了我们的全局异常处理。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>文章参考自 <strong><a href="http://blog.battcn.com/2018/06/01/springboot/v2-other-exception/" target="_blank" rel="noopener">http://blog.battcn.com/2018/06/01/springboot/v2-other-exception/</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/ea44603cafdefc75acaa.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="exception" scheme="http://yoursite.com/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0使用redis作数据缓存</title>
    <link href="http://yoursite.com/2018/06/17/SpringBoot2.0%E6%95%B4%E5%90%88redis%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2018/06/17/SpringBoot2.0整合redis缓存数据/</id>
    <published>2018-06-17T05:31:52.969Z</published>
    <updated>2018-06-19T01:42:12.870Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/65fb7b01ad3b3e92d3e9.jpg" alt=""><br><a id="more"></a></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0.3</strong></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先，先创建一个SpringBoot项目，在pom.xml里面添加以下依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!--添加redis依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;!--添加sprng-data-jpa依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"> &lt;!--添加mysql依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>为了区分我们是从redis中获取的数据，这里引入mysql来从数据库中查询，接下来在application配置文件中加入数据库连接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line">spring.datasource.username=XXX</span><br><span class="line">spring.datasource.password=XXX</span><br><span class="line">spring.datasource.url=jdbc:mysql://127.0.0.1:3306/XXX?characterEncoding=utf8</span><br><span class="line">spring.jpa.show-sql=true</span><br></pre></td></tr></table></figure></p><p>这里redis如果没有配置的话就是默认的，地址为127.0.0.1，端口号为6379，密码为空。接着创建实体类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;user&quot;)</span><br><span class="line">public class UserBean implements Serializable &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    --省略setter、getter方法</span><br></pre></td></tr></table></figure></p><p>dao层<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public interface UserJpa extends JpaRepository&lt;UserBean,Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里继承SpringDataJpa的JpaRepository，可以实现基础的增删改查操作，具体更多以用法后面会写一些，以上基本配置完成之后，重要部分来了，创建service<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface RedisService &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 测试取出缓存数据</span><br><span class="line">     */</span><br><span class="line">    String getRedisData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>serviceImpl<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class RedisServiceImpl implements RedisService &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger =LoggerFactory.getLogger(RedisServiceImpl.class);</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserJpa userJpa;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getRedisData() &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = redisTemplate.opsForValue();</span><br><span class="line">        String redisData = ops.get(&quot;redisData&quot;);</span><br><span class="line">//        缓存中没有数据</span><br><span class="line">        if (redisData == null)&#123;</span><br><span class="line">            logger.info(&quot;查询数据库，存入缓存数据&quot;);</span><br><span class="line">//           查询数据库</span><br><span class="line">            List&lt;UserBean&gt; userList = userJpa.findAll();</span><br><span class="line">//            存入缓存</span><br><span class="line">            ops.set(&quot;redisData&quot;,userList.toString(),1800,TimeUnit.SECONDS);</span><br><span class="line">            return userList.toString();</span><br><span class="line">        &#125;</span><br><span class="line">            logger.info(&quot;直接从缓存中获取数据&quot;);</span><br><span class="line">            return redisData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一般时先从redis里面去数据，如果没有取到数据的话,就去查数据库，当然，查到数据之后也应该放进redis中，方便下次取出。这里ops.set()方法表示存入key为redisData的userList数据，设置有效时间为1800，TimeUnit.seconds表示单位为秒。<br>最后，创建测试类测试一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class QuartzApplicationTests &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisService redisService;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void contextLoads() &#123;</span><br><span class="line">        String redisData = redisService.getRedisData();</span><br><span class="line">        System.out.println(redisData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动测试类观察控制台的打印日志：<br><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/c613cd7ccf5bc53a77d2.png" alt=""><br>第一次启动，因为redis里面没有数据，所以查询数据库，然后放到redis里面，再次启动测试类<br><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/1ebd09526ae01cf0f907.png" alt=""><br>这里看到日志里已经没有取查我们的数据库了，而是直接从redis里面拿的数据了，大功告成 ^-^</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/65fb7b01ad3b3e92d3e9.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0整合quartz发布定时任务</title>
    <link href="http://yoursite.com/2018/06/15/SpringBoot%202.0%E6%95%B4%E5%90%88quartz%E5%8F%91%E5%B8%83%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/06/15/SpringBoot 2.0整合quartz发布定时任务/</id>
    <published>2018-06-15T07:25:26.923Z</published>
    <updated>2018-06-15T09:53:35.419Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/2f2c4529aebefbbd447b.jpg" alt=""><br><a id="more"></a></p><h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><ul><li><strong>IntelliJ IDEA 2018.1 x64</strong></li><li><strong>jdk8</strong></li><li><strong>SpringBoot 2.0</strong></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先，先创建一个SpringBoot项目，在pom.xml里面添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--定时任务依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>然后，包名下面创建config目录，创建QuartzConfig.java类作为定时任务的配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class QuartzConfig &#123;</span><br><span class="line">    @Bean</span><br><span class="line">    public JobDetail testDataJobDetail()&#123;</span><br><span class="line">        return JobBuilder.newJob(TestQuartzJob.class)</span><br><span class="line">                .withIdentity(&quot;testDataJobDetail&quot;)</span><br><span class="line">                .storeDurably().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public Trigger testDataTrigger()&#123;</span><br><span class="line">//        设置定时同步缓存数据</span><br><span class="line">        ScheduleBuilder schedBuilder =SimpleScheduleBuilder.simpleSchedule()</span><br><span class="line">                .withIntervalInSeconds(1800).repeatForever();</span><br><span class="line"></span><br><span class="line">        return TriggerBuilder.newTrigger().forJob(testDataJobDetail())</span><br><span class="line">                .withIdentity(&quot;testDataTrigger&quot;)</span><br><span class="line">                .withSchedule(schedBuilder).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中TestQuartzJob是定时任务类,withIntervalInSeconds是设置时间进行同步，以秒为单位，这里设置了1800秒，也就是30分钟。<br>接下来，开始创建定时任务类TestQuartzJob，便于区分，我们新建包名job用来专门存放定时任务类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class TestQuartzJob extends QuartzJobBean &#123;</span><br><span class="line"></span><br><span class="line">    private static final Logger logger =LoggerFactory.getLogger(TestQuartzJob.class);</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void executeInternal(JobExecutionContext jobExecutionContext)</span><br><span class="line">            throws JobExecutionException &#123;</span><br><span class="line">            logger.info(&quot;开始定时任务&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便测试，我们把之前设定的1800秒换成5秒，启动之后观察控制台的日志</p><p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/4206880c6c82aa84ef54.png" alt=""></p><p>注意日志时间，的确是5秒一次，这样我们的定时任务也就完成了。</p><p>（PS:第一次自己写博客，写的不好请多指正，留下你的评论，一起探讨吧&gt;_&lt;）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/2f2c4529aebefbbd447b.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="quartz" scheme="http://yoursite.com/tags/quartz/"/>
    
  </entry>
  
  <entry>
    <title>初识NoSQL</title>
    <link href="http://yoursite.com/2018/06/14/nosql/"/>
    <id>http://yoursite.com/2018/06/14/nosql/</id>
    <published>2018-06-13T16:00:00.000Z</published>
    <updated>2018-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://lc-7t0bebm8.cn-n1.lcfile.com/65fc96f5077c1d5b1f4e.jpg" alt=""><br><a id="more"></a></p><h2 id="NoSql-简介"><a href="#NoSql-简介" class="headerlink" title="NoSql 简介"></a>NoSql 简介</h2><p>NOSQL(<strong>NOSQL = NOT ONLY SQL</strong>)，意即”不仅仅是SQL”。在现代的计算系统上每天网络上都会产生庞大的数据量。通过应用实践证明，关系模型是非常适合于客户服务器编程，远远超出预期的利益，今天它是结构化数据存储在网络和商务应用的主导技术。<br>NOSQL 是一项全新的数据库革命性运动，早期就有人提出，发展至2009年趋势越发高涨。NOSQL的拥护者们提倡运用非关系型的数据存储，相对于铺天盖地的关系型数据库运用，这一概念无疑是一种全新的思维的注入。</p><h2 id="关系型数据库遵循ACID规则"><a href="#关系型数据库遵循ACID规则" class="headerlink" title="关系型数据库遵循ACID规则"></a>关系型数据库遵循ACID规则</h2><p>事务在英文中是transaction，和现实世界中的交易很类似，它有如下四个特性：<br>1.　 <strong>A (Atomicity) 原子性</strong><br>　　原子性很容易理解，也就是说<strong>事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚</strong>。<br>　　比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。<br>2.　 <strong>C (Consistency) 一致性</strong><br>　　一致性也比较容易理解，也就是说<strong>数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</strong><br>　　例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。<br>3.　 <strong>I (Isolation) 独立性</strong><br>　　所谓的独立性是指<strong>并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</strong><br>　　比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。<br>4.　 <strong>D (Durability) 持久性</strong><br>　　持久性是指<strong>一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</strong></p><h2 id="关系型数据库（RDBMS）与NoSQL对比"><a href="#关系型数据库（RDBMS）与NoSQL对比" class="headerlink" title="关系型数据库（RDBMS）与NoSQL对比"></a>关系型数据库（RDBMS）与NoSQL对比</h2><p><strong>RDBMS</strong> </p><ul><li>高度组织化结构化数据 </li><li>结构化查询语言（SQL） (SQL) </li><li>数据和关系都存储在单独的表中。 </li><li>数据操纵语言，数据定义语言 </li><li>严格的一致性</li><li>基础事务</li></ul><p><strong>NoSQL</strong></p><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li><strong>键 - 值对存储，列存储，文档存储，图形数据库</strong></li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理 </li><li><strong>高性能，高可用性和可伸缩性</strong></li></ul><h2 id="NoSQL优点和缺点"><a href="#NoSQL优点和缺点" class="headerlink" title="NoSQL优点和缺点"></a>NoSQL优点和缺点</h2><p><strong>优点：</strong></p><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul><p><strong>缺点:</strong></p><ul><li>没有标准化</li><li>有限的查询功能（到目前为止）</li><li>最终一致是不直观的程序</li></ul><p>文章摘自<a href="http://www.runoob.com/mongodb/nosql.html" title="菜鸟教程" target="_blank" rel="noopener">菜鸟教程</a>，仅供学习，勿用作其他用途。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://lc-7t0bebm8.cn-n1.lcfile.com/65fc96f5077c1d5b1f4e.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="NoSQL" scheme="http://yoursite.com/categories/NoSQL/"/>
    
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
</feed>
